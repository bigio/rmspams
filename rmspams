#!/bin/ksh
#
# Copyright (c) 2017 Wesley MOUEDINE ASSABY <milo974@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

# DEBUG
# set -x

########################################################################
## DO NOT EDIT THIS FILE!!!                                           ##
## User defined variables: overrides are read from /etc/rmspams.conf  ##
########################################################################

MAIL_PATH="/var/mailserver/mail"

PF_TABLE="blacksmtp"
PF_TABLE_FILE="/etc/blacksmtp"

WHITE_LIST="/etc/whitesmtp"

########################################################################
## End of user defined variables                                      ##
########################################################################

rs_err()
{
  echo "${1}" 1>&2 && return "${2:-1}"
}

usage()
{
  rs_err "Usage: ${0##*/} email"
}

syntax_check()
{
  [[ ${_NARG} == 0 || ${_NARG} -gt 1 ]] && usage

  (! echo "${_EMAIL}" | grep -q '^[a-zA-Z0-9._%+-]*@[a-zA-Z0-9]*[\.[a-zA-Z0-9-]*]*[a-zA-Z0-9]$') \
    && rs_err "${0##*/}: bad recipient address"

  (($(id -u) != 0)) && rs_err "${0##*/}: need root privileges"
}

fs_check()
{
  local _files

  _files="${_CONFIG} ${WHITE_LIST} ${PF_TABLE_FILE}"

  for _file in ${_files}; do
    if [ -f "${_file}" ]; then
      if [ "$(stat -f "%SMp%SLp" "${_file}")" != "------" ]; then
        echo "Unsecure permissions on ${_file}; please run:"
        rs_err "doas chmod 0600 ${_file}"
      fi
    else
      [[ "${_file}" != "${_CONFIG}" ]] && rs_err "${_file} missing"
    fi
  done
}

pf_check()
{
  (! /sbin/pfctl -s Tables | grep -q "${PF_TABLE}") && rs_err "${PF_TABLE} table doesn't exist"

  local _nbf _nbt

  _nbf=$( (wc -l) < ${PF_TABLE_FILE} )
  _nbt=$(/sbin/pfctl -t${PF_TABLE} -Tshow | wc -l)

  (("${_nbf}" != "${_nbt}"))&& rs_err "Inconsistency between table and file"
}

build_full_dir()
{
  local _domainf _userf _spamf

  _domainf=${_EMAIL#*@}
  _userf=${_EMAIL%@*}
  _spamf=".Spam/cur"

  _FULL_DIR="${MAIL_PATH}/${_domainf}/${_userf}/${_spamf}"

  [[ ! -d "${_FULL_DIR}" ]] && rs_err "${_FULL_DIR} doesn't exist"
    [ "$(find "${_FULL_DIR}" -mindepth 1)" ] || exit 0
}

fetch_ip()
{
  _IP=$(grep "^Received: from" "${1}"| sed 's/.*\[//; s/].*//' | \
    grep -vE '(^127\.0\.0\.1)|(^192\.168)|(^10\.)|(^172\.1[6-9])|(^172\.2[0-9])|(^172\.3[0-1])|(^local$)')

  _REST=$((_REST-1))
}

resolve_ip_to_name()
{
  _NAME=$(nslookup -query=a "$1" | \
        grep -v canonical | grep name | awk '{print $4}')

  [[ -z ${_NAME} ]] && _NAME='unknown.' 

  echo "${_IP} = ${_NAME} -- Remaining : ${_REST} \c"

  [[ ${_NAME} != "localhost." && ${_NAME} != "unknown." ]] && check_white_list
  [[ ${_NAME} == "unknown." ]] && echo 'u' && rm -f "${_F}"
}

find_ip_in_pf()
{
  if [ -f "${_F}" ]; then
    (grep -q ^"${_IP}"$ ${PF_TABLE_FILE}) && echo 'b' && rm -f "${_F}"
    (! grep -q ^"${_IP}"$ ${PF_TABLE_FILE}) && your_choice
  fi
}

check_white_list()
{
  local _whitedns

  if [ ! -s ${WHITE_LIST} ]; then
    find_ip_in_pf
  else
    while read -r _whitedns ; do
      (echo ${_NAME} | grep -q "${_whitedns}$") && echo 'w' && rm -f "${_F}" && break
    done < ${WHITE_LIST}
    find_ip_in_pf
  fi
}

add_and_load_to_pf()
{
  echo "${_IP}" >> ${PF_TABLE_FILE}
  /sbin/pfctl -t ${PF_TABLE} -T add "${_IP}"
  /sbin/pfctl -f /etc/pf.conf
  rm -f "${_F}"
}

your_choice()
{
  local _ans
  echo "\n\tAdd this IP to blacklist ? (y|n or q to exit) \c"
  read -r _ans < /dev/tty
  [[ "${_ans}" == "q" ]] && exit 0
  [[ "${_ans}" != "y" && "${_ans}" != "n" ]] && your_choice
  [[ "${_ans}" == "y" ]] && add_and_load_to_pf
}

_NARG=$#
_EMAIL=$1
_CONFIG=/etc/rmspams.conf

# shellcheck source=/dev/null
[[ -f ${_CONFIG} ]] && . "${_CONFIG}"

syntax_check
fs_check
pf_check
build_full_dir

_REST=$(find "${_FULL_DIR}" -maxdepth 1 -type f | wc -l)

for _F in ${_FULL_DIR}/* ; do
  fetch_ip "${_F}"
  resolve_ip_to_name "${_IP}"
done

exit 0